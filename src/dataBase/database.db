-- Nombre de la base de datos
CREATE DATABASE IF NOT EXISTS hotel_club;

-- Si la base de datos ya existe, no se creará de nuevo
USE hotel_club;
-- Usar la base de datos

-- MODULE LOGIN
CREATE TABLE -- Tabla de usuarios del hotel para la admistracion de hotel y club.
  users_hotel (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE, -- Nombre de usuario único
    password VARCHAR(255) NOT NULL, -- Contraseña cifrada
    role ENUM ('Administrador', 'Usuario') NOT NULL -- Rol del usuario
  );

CREATE TABLE -- Tabla para almacenar tokens de recuperación de contraseña
  password_resets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL, -- ID del usuario que solicita la recuperación
    token VARCHAR(255) NOT NULL UNIQUE, -- Token único para la recuperación
    expires_at DATETIME NOT NULL, -- Fecha y hora de expiración del token
    FOREIGN KEY (user_id) REFERENCES users_hotel (id) ON DELETE CASCADE
  );

-- =====================================================
-- MÓDULO DE HABITACIONES
-- =====================================================

-- 1) Tabla de Habitaciones
CREATE TABLE
  habitaciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    numero VARCHAR(10) NOT NULL UNIQUE,
    tipo ENUM ('sencilla', 'suite') NOT NULL,
    estado ENUM ('disponible', 'ocupado', 'limpieza') DEFAULT 'disponible'
  );

-- Insertar habitaciones fijas
INSERT INTO
  habitaciones (numero, tipo)
VALUES
  ('101', 'sencilla'),
  ('102', 'sencilla'),
  ('103', 'sencilla'),
  ('104', 'sencilla'),
  ('106', 'sencilla'),
  ('107', 'sencilla'),
  ('108', 'sencilla'),
  ('109', 'sencilla'),
  ('105', 'suite'),
  ('110', 'suite');

-- 2) Tabla de Precios
-- Precio definido por mes y tipo de habitación
CREATE TABLE
  precios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_habitacion ENUM ('sencilla', 'suite') NOT NULL,
    mes INT NOT NULL CHECK (mes BETWEEN 1 AND 12), -- Enero=1 ... Diciembre=12
    monto DECIMAL(10, 2) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (tipo_habitacion, mes) -- un precio por tipo de habitación y mes
  );

-- 3) Tabla de Reservaciones
-- Se guarda el precio al momento de la reserva
CREATE TABLE
  reservaciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    habitacion_id INT NOT NULL,
    usuario_id INT NOT NULL,
    nombre_cliente VARCHAR(100) NOT NULL,
    fecha_reserva DATE NOT NULL, -- día en que se hizo la reserva
    fecha_ingreso DATE NOT NULL, -- día que ocupará
    fecha_salida DATE NOT NULL,
    monto DECIMAL(10, 2) NOT NULL, -- precio guardado al reservar
    monto_letras VARCHAR(255) NOT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (habitacion_id) REFERENCES habitaciones (id),
    FOREIGN KEY (usuario_id) REFERENCES users_hotel (id)
  );

-- 4) Tabla de Rentas
-- Registro de ocupación real de habitaciones
CREATE TABLE
  rentas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    habitacion_id INT NOT NULL,
    usuario_id INT NOT NULL,
    nombre_cliente VARCHAR(100) NOT NULL,
    fecha_ingreso DATE NOT NULL,
    fecha_salida DATE NOT NULL,
    tipo_pago ENUM ('tarjeta', 'transferencia', 'efectivo') NOT NULL,
    monto DECIMAL(10, 2) NOT NULL,
    monto_letras VARCHAR(255) NOT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (habitacion_id) REFERENCES habitaciones (id),
    FOREIGN KEY (usuario_id) REFERENCES users_hotel (id)
  );

-- =====================================================
-- EJEMPLO DE CONSULTA PARA EL CALENDARIO
-- Mostrar habitaciones ocupadas en los próximos días
-- =====================================================
SELECT
  h.numero,
  h.tipo,
  r.fecha_ingreso,
  r.fecha_salida,
  r.nombre_cliente
FROM
  reservaciones r
  INNER JOIN habitaciones h ON r.habitacion_id = h.id
WHERE
  r.fecha_salida >= CURDATE ()
ORDER BY
  r.fecha_ingreso;


-- =====================================================
-- MÓDULO DE MEMBRESÍAS
-- =====================================================
-- Tabla de tipos de membresía (elimina ENUM)
CREATE TABLE tipos_membresia (
    id_tipo_membresia SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    max_integrantes INTEGER DEFAULT 1 CHECK (max_integrantes >= 1),
    precio DECIMAL(10,2) NOT NULL
);



-- Tabla de clientes (sin cambios, ya está en 3NF)
CREATE TABLE clientes (
    id_cliente SERIAL PRIMARY KEY,
    nombre_completo VARCHAR(150) NOT NULL,
    telefono VARCHAR(20),
    correo VARCHAR(100),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de relaciones familiares (nueva)
CREATE TABLE relaciones_familiares (
    id_relacion SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
);

-- Tabla de membresías (precios base históricos)
CREATE TABLE membresias (
    id_membresia SERIAL PRIMARY KEY,
    id_cliente INT NOT NULL REFERENCES clientes(id_cliente),
    id_tipo_membresia INT NOT NULL REFERENCES tipos_membresia(id_tipo_membresia),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT NOW()
);



-- Tabla de membresías activas
CREATE TABLE membresias_activas (
    id_activa SERIAL PRIMARY KEY,
    id_cliente INTEGER NOT NULL REFERENCES clientes(id_cliente),
    id_membresia INTEGER NOT NULL REFERENCES membresias(id_membresia),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    precio_final DECIMAL(10,2) NOT NULL CHECK (precio_final > 0),
    qr_code VARCHAR(255) UNIQUE,
    estado VARCHAR(20) DEFAULT 'Activa' CHECK (estado IN ('Activa', 'Vencida', 'Cancelada')),
    CHECK (fecha_fin > fecha_inicio)
);

-- Tabla de integrantes (reemplaza familiares)
CREATE TABLE integrantes_membresia (
    id_integrante SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas(id_activa),
    id_cliente INTEGER NOT NULL REFERENCES clientes(id_cliente),
    id_relacion INTEGER REFERENCES relaciones_familiares(id_relacion),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(id_activa, id_cliente)
);

-- Tabla de métodos de pago (elimina ENUM)
CREATE TABLE metodos_pago (
    id_metodo_pago SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
);

-- Tabla de pagos
CREATE TABLE pagos (
    id_pago SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas(id_activa),
    id_metodo_pago INTEGER NOT NULL REFERENCES metodos_pago(id_metodo_pago),
    monto DECIMAL(10,2) NOT NULL CHECK (monto > 0),
    fecha_pago TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    comprobante_url VARCHAR(255),
    referencia_pago VARCHAR(100)
);

-- Tabla de estados de membresía (para auditoría)
CREATE TABLE historial_estados_membresia (
    id_historial SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas(id_activa),
    estado_anterior VARCHAR(20),
    estado_nuevo VARCHAR(20) NOT NULL,
    fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    motivo_cambio TEXT
); TEXT
  );
