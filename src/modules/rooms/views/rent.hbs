{{>navbar}}

<div id="center-root" class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 overflow-x-hidden md:grid md:place-items-center lg:grid lg:place-items-center">
  <div class="max-w-md sm:max-w-lg md:max-w-2xl lg:max-w-3xl xl:max-w-4xl mx-auto px-3 sm:px-4 md:px-6 lg:px-4 pt-16 sm:pt-20 lg:pt-0 xl:pt-2 pb-24 sm:pb-20 lg:pb-0">
    <!-- Header -->
    <header class="text-center py-2 sm:py-6 lg:hidden">
      <!-- Puedes poner un título global si quieres -->
    </header>

    <!-- Form Container -->
    <form
      id="formRent"
      action="/rooms/create-renta/{{habitacion.id}}"
      method="POST"
      class="bg-white rounded-lg sm:rounded-xl shadow-md overflow-hidden ring-1 ring-slate-100 transition-all duration-300 ease-out hover:shadow-xl hover:-translate-y-[1px]"
      aria-labelledby="form-title"
    >
      <input type="hidden" id="room_id" value="{{habitacion.id}}">

      <!-- Room Info Header -->
      <div class="bg-gradient-to-r from-blue-900 via-blue-800 to-blue-900 text-white px-3 py-3 sm:px-6 sm:py-4 lg:py-1.5">
        <div class="mb-2 lg:mb-1 flex items-center justify-start gap-2">
          <a href="/rooms" class="inline-flex items-center gap-2 text-sm sm:text-base hover:opacity-90 transition">
            <!-- Back icon -->
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 sm:w-5 sm:h-5" viewBox="0 0 24 24">
              <path fill-rule="evenodd" d="M10.03 3.97a.75.75 0 010 1.06L5.06 10h15.19a.75.75 0 010 1.5H5.06l4.97 4.97a.75.75 0 11-1.06 1.06l-6.25-6.25a.75.75 0 010-1.06l6.25-6.25a.75.75 0 011.06 0z" clip-rule="evenodd"/>
            </svg>
            Volver
          </a>
        </div>

        <h2 id="form-title" class="text-sm sm:text-lg md:text-xl lg:text-base font-bold flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 sm:w-5 sm:h-5 opacity-90" viewBox="0 0 24 24">
            <path d="M3.75 3a.75.75 0 000 1.5h.75v14.25A2.25 2.25 0 006.75 21h10.5A2.25 2.25 0 0019.5 18.75V4.5h.75a.75.75 0 000-1.5h-16.5zM9 6h6a.75.75 0 010 1.5H9A.75.75 0 019 6zm0 3h6a.75.75 0 010 1.5H9A.75.75 0 019 9zm0 3h6a.75.75 0 010 1.5H9A.75.75 0 019 12zm0 3h6a.75.75 0 010 1.5H9A.75.75 0 019 15z"/>
          </svg>
          Habitación {{habitacion.numero}} • {{habitacion.tipo}}
        </h2>
        <p class="text-blue-100 text-xs sm:text-sm lg:hidden">Complete los datos</p>
      </div>

      <!-- Form Content -->
      <div class="p-4 sm:p-6 md:p-6 lg:p-4">
        <div class="space-y-5 sm:space-y-6 md:space-y-0 md:grid md:grid-cols-2 md:gap-5 lg:gap-6">
          <!-- Columna izquierda: Cliente + Fechas -->
          <div class="space-y-5 sm:space-y-6 lg:space-y-4">
            <!-- Cliente -->
            <section aria-labelledby="cliente-title" class="space-y-2 md:space-y-3">
              <h3 id="cliente-title" class="text-sm sm:text-base md:text-lg lg:text-xs font-semibold text-gray-900 border-b border-gray-200 pb-2 md:pb-2 lg:pb-1 flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4" viewBox="0 0 24 24"><path d="M12 12a5 5 0 100-10 5 5 0 000 10zm-7 9a7 7 0 0114 0v1H5v-1z"/></svg>
                Cliente
              </h3>
              <div>
                <label for="client_name" class="block text-sm lg:text-xs font-medium text-slate-700 mb-1 lg:mb-0.5">Nombre *</label>
                <div class="relative group">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
                    <path d="M12 12a5 5 0 100-10 5 5 0 000 10zm-7 9a7 7 0 0114 0v1H5v-1z" />
                  </svg>
                  <input id="client_name" name="client_name" required placeholder="Nombre completo"
                    class="w-full pl-9 pr-3 py-3 lg:py-2 text-base lg:text-sm border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"/>
                </div>
              </div>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <div>
                  <label for="email" class="block text-sm lg:text-xs font-medium text-slate-700 mb-1">Email *</label>
                  <div class="relative group">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
                      <path d="M1.5 6.75A2.25 2.25 0 013.75 4.5h16.5a2.25 2.25 0 012.25 2.25v10.5A2.25 2.25 0 0120.25 19.5H3.75A2.25 2.25 0 011.5 17.25V6.75zm2.776-.75A.026.026 0 004.25 6l7.75 5.167L19.75 6a.026.026 0 00-.026 0H4.276z"/>
                    </svg>
                    <input id="email" name="email" type="email" required placeholder="email@ejemplo.com"
                      class="w-full pl-9 pr-3 py-3 lg:py-2 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"/>
                  </div>
                </div>
                <div>
                  <label for="phone" class="block text-sm lg:text-xs font-medium text-slate-700 mb-1">Teléfono *</label>
                  <div class="relative group">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
                      <path d="M2.25 4.5A2.25 2.25 0 014.5 2.25h3A2.25 2.25 0 019.75 4.5v15A2.25 2.25 0 017.5 21.75h-3A2.25 2.25 0 012.25 19.5v-15zM6 18.75a.75.75 0 100 1.5.75.75 0 000-1.5z"/>
                    </svg>
                    <input id="phone" name="phone" type="tel" maxlength="10" required placeholder="1234567890"
                      class="w-full pl-9 pr-3 py-3 lg:py-2 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"/>
                  </div>
                </div>
              </div>
            </section>

            <!-- Fechas -->
            <section aria-labelledby="fechas-title" class="space-y-2 md:space-y-3">
              <h3 id="fechas-title" class="text-sm sm:text-base md:text-lg lg:text-xs font-semibold text-gray-900 border-b pb-2 md:pb-2 flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4" viewBox="0 0 24 24"><path d="M6.75 3a.75.75 0 01.75.75V5h9V3.75a.75.75 0 011.5 0V5h.75A2.25 2.25 0 0121 7.25v11.5A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75V7.25A2.25 2.25 0 015.25 5H6V3.75A.75.75 0 016.75 3zM4.5 9v9.75c0 .414.336.75.75.75h13.5a.75.75 0 00.75-.75V9H4.5z"/></svg>
                Fechas
              </h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <div>
                  <label for="check_in" class="block text-sm font-medium text-slate-700 mb-1">Entrada *</label>
                  <div class="relative group">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
                      <path d="M6.75 3a.75.75 0 01.75.75V5h9V3.75a.75.75 0 011.5 0V5h.75A2.25 2.25 0 0121 7.25v11.5A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75V7.25A2.25 2.25 0 015.25 5H6V3.75A.75.75 0 016.75 3zM4.5 9v9.75c0 .414.336.75.75.75h13.5a.75.75 0 00.75-.75V9H4.5z"/>
                    </svg>
                    <input id="check_in" name="check_in" type="date" required
                      class="w-full pl-9 pr-3 py-3 lg:py-2 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"/>
                  </div>
                </div>
                <div>
                  <label for="check_out" class="block text-sm font-medium text-slate-700 mb-1">Salida *</label>
                  <div class="relative group">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
                      <path d="M6.75 3a.75.75 0 01.75.75V5h9V3.75a.75.75 0 011.5 0V5h.75A2.25 2.25 0 0121 7.25v11.5A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75V7.25A2.25 2.25 0 015.25 5H6V3.75A.75.75 0 016.75 3zM4.5 9v9.75c0 .414.336.75.75.75h13.5a.75.75 0 00.75-.75V9H4.5z"/>
                    </svg>
                    <input id="check_out" name="check_out" type="date" required
                      class="w-full pl-9 pr-3 py-3 lg:py-2 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"/>
                  </div>
                </div>
              </div>
              <div id="duration-display" class="hidden bg-blue-50 border rounded-md p-2">
                <span class="text-blue-800 text-sm">Duración: <span id="nights-count" class="font-medium">0</span> noches</span>
              </div>
            </section>
          </div>

          <!-- Columna derecha: Precio + Pago -->
          <div class="space-y-5 md:space-y-6">
            <section aria-labelledby="precio-title" class="space-y-2 md:space-y-3">
              <h3 id="precio-title" class="text-sm md:text-lg font-semibold text-gray-900 border-b pb-2 md:pb-2 flex items-center gap-2">Precio</h3>
              <div class="relative group">
                <span class="pointer-events-none absolute left-3 top-3.5 text-slate-400 text-sm transition-colors group-focus-within:text-blue-500">$</span>
                <input id="price" name="price" type="number" readonly placeholder="0.00"
                  class="w-full pl-8 pr-3 py-3 border border-slate-300 rounded-lg bg-slate-50 text-slate-700 font-medium focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"/>
                <input id="price_text" name="price_text" type="hidden" readonly />
              </div>
            </section>

            <section aria-labelledby="pago-title" class="space-y-2 md:space-y-3">
              <h3 id="pago-title" class="text-sm md:text-lg font-semibold text-gray-900 border-b pb-2 md:pb-2 flex items-center gap-2">Pago</h3>
              <div class="relative group">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
                  <path d="M2.25 7.5A2.25 2.25 0 014.5 5.25h15a2.25 2.25 0 012.25 2.25v9A2.25 2.25 0 0119.5 18.75h-15A2.25 2.25 0 012.25 16.5v-9zM3.75 9h16.5V7.5a.75.75 0 00-.75-.75h-15a.75.75 0 00-.75.75V9z"/>
                </svg>
                <select id="payment_type" name="payment_type" required
                  class="w-full pl-9 pr-8 py-3 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200 appearance-none">
                  <option value="">-- Seleccionar método de pago --</option>
                  <option value="Card">Tarjeta</option>
                  <option value="Transfer">Transferencia</option>
                  <option value="Cash">Efectivo</option>
                </select>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400">
                  <path fill-rule="evenodd" d="M12 14.25l-5.47-5.47a.75.75 0 011.06-1.06L12 12.13l4.41-4.41a.75.75 0 111.06 1.06L12 14.25z" clip-rule="evenodd"/>
                </svg>
              </div>
            </section>
          </div>
        </div>

        <!-- Botones -->
        <div class="flex flex-col sm:flex-row gap-3 pt-4 border-t mt-5 md:justify-end">
          <a href="/rooms" class="w-full sm:w-auto px-6 py-3 border border-slate-300 rounded-lg text-slate-700 hover:bg-slate-50 active:scale-[0.98] transition inline-flex items-center justify-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path fill-rule="evenodd" d="M10.03 3.97a.75.75 0 010 1.06L5.06 10h15.19a.75.75 0 010 1.5H5.06l4.97 4.97a.75.75 0 11-1.06 1.06l-6.25-6.25a.75.75 0 010-1.06l6.25-6.25a.75.75 0 011.06 0z" clip-rule="evenodd"/></svg>
            Cancelar
          </a>
          <button type="submit" class="w-full sm:w-auto px-6 py-3 bg-green-600 text-white rounded-lg shadow-sm hover:shadow-md hover:bg-green-700 active:scale-[0.98] transition inline-flex items-center justify-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path d="M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5H12.75v6.75a.75.75 0 01-1.5 0V12.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z"/></svg>
            Crear Renta
          </button>
        </div>
      </div>
    </>
  </div>
</div>

{{>footer}}

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Dynamic center: set available height between navbar and footer on desktop
    const centerRoot = document.getElementById('center-root');
    function applyDesktopCenter() {
      if (!centerRoot) return;
      const isDesktop = window.matchMedia('(min-width: 1024px)').matches;
      if (!isDesktop) {
        centerRoot.style.height = '';
        centerRoot.style.minHeight = '';
        return;
      }
      const nav = document.querySelector('nav');
      const footer = document.querySelector('footer');
      const navStyle = nav ? getComputedStyle(nav) : null;
      const footStyle = footer ? getComputedStyle(footer) : null;
      const navIsFixed = navStyle ? (navStyle.position === 'fixed' || (navStyle.position === 'sticky' && navStyle.top === '0px')) : false;
      const footIsFixed = footStyle ? (footStyle.position === 'fixed' || (footStyle.position === 'sticky' && footStyle.bottom === '0px')) : false;
      const navH = navIsFixed && nav ? nav.offsetHeight : 0;
      const footH = footIsFixed && footer ? footer.offsetHeight : 0;
      const available = Math.max(window.innerHeight - navH - footH, 360);
      centerRoot.style.height = available + 'px';
      centerRoot.style.minHeight = available + 'px';
    }
    applyDesktopCenter();
    window.addEventListener('resize', applyDesktopCenter);
    const roomId = Number(document.getElementById("room_id").value);
    const checkInInput = document.getElementById("check_in");
    const checkOutInput = document.getElementById("check_out");
    const priceField = document.getElementById("price");
    const priceTextField = document.getElementById("price_text");
    const durationDisplay = document.getElementById("duration-display");
    const nightsCount = document.getElementById("nights-count");
    const submitButton = document.querySelector('button[type="submit"]');

    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    checkInInput.min = today;
    checkOutInput.min = today;

    // Show notification function
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg text-white font-medium transition-all duration-300 ${
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
      }`;
      notification.textContent = message;
      notification.setAttribute('role', 'status');
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
      }, 4000);
    }

    // Calculate nights between dates
    function calculateNights(checkIn, checkOut) {
      if (!checkIn || !checkOut) return 0;
      const start = new Date(checkIn);
      const end = new Date(checkOut);
      const diffTime = Math.abs(end - start);
      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    // Update duration display
    function updateDurationDisplay(checkIn, checkOut) {
      const nights = calculateNights(checkIn, checkOut);
      if (nights > 0) {
        nightsCount.textContent = nights;
        durationDisplay.classList.remove('hidden');
        durationDisplay.classList.add('flex');
      } else {
        durationDisplay.classList.add('hidden');
        durationDisplay.classList.remove('flex');
      }
      return nights;
    }

    // Fetch price from API
    async function fetchPrice(checkIn, nights = 1) {
      if (!checkIn) return;

      const month = new Date(checkIn).getMonth() + 1;
      submitButton.disabled = true;
      submitButton.textContent = 'Calculando precio...';

      try {
        const res = await fetch(`/api/rooms/${roomId}/price?month=${month}`);
        const json = await res.json();
        const pricePerNight = json.price ?? 0;
        const totalPrice = pricePerNight * nights;

        priceField.value = totalPrice.toFixed(2);
        priceTextField.value = numberToWords(totalPrice);

        showNotification(`Precio calculado: $${totalPrice.toFixed(2)} por ${nights} noche(s)`, 'success');
      } catch (err) {
        showNotification('Error al obtener el precio', 'error');
        console.error("Error obteniendo precio:", err);
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Crear Renta';
      }
    }

    // Check room availability
    async function checkAvailability(checkIn, checkOut) {
      if (!checkIn || !checkOut) return false;

      try {
        const url = `/api/rooms/${roomId}/available?check_in=${encodeURIComponent(checkIn)}&check_out=${encodeURIComponent(checkOut)}`;
        const res = await fetch(url);
        const json = await res.json();

        if (!json.available) {
          showNotification("La habitación no está disponible en esas fechas", 'error');
          checkInInput.value = "";
          checkOutInput.value = "";
          priceField.value = "";
          priceTextField.value = "";
          durationDisplay.classList.add('hidden');
          durationDisplay.classList.remove('flex');
          return false;
        }

        showNotification("Habitación disponible", 'success');
        return true;
      } catch (err) {
        showNotification('Error al verificar disponibilidad', 'error');
        console.error("Error verificando disponibilidad:", err);
        return false;
      }
    }

    // Convert number to words in Spanish
    function numberToWords(num) {
      const unidades = ["", "uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve"];
      const especiales = ["diez", "once", "doce", "trece", "catorce", "quince",
                          "dieciséis", "diecisiete", "dieciocho", "diecinueve"];
      const decenas = ["", "", "veinte", "treinta", "cuarenta", "cincuenta",
                       "sesenta", "setenta", "ochenta", "noventa"];
      const centenas = ["", "ciento", "doscientos", "trescientos", "cuatrocientos",
                        "quinientos", "seiscientos", "setecientos", "ochocientos", "novecientos"];

      if (num === 0) return "cero pesos";
      if (num === 100) return "cien pesos";

      let words = "";
      let originalNum = Math.floor(num);

      if (originalNum >= 1000000) {
        return originalNum + " pesos";
      }

      if (originalNum >= 1000) {
        const miles = Math.floor(originalNum / 1000);
        if (miles === 1) {
          words += "mil";
        } else {
          words += numberToWords(miles).replace(" pesos", "") + " mil";
        }
        originalNum = originalNum % 1000;
        if (originalNum > 0) words += " ";
      }

      if (originalNum >= 100) {
        words += centenas[Math.floor(originalNum / 100)];
        originalNum = originalNum % 100;
        if (originalNum > 0) words += " ";
      }

      if (originalNum >= 20) {
        words += decenas[Math.floor(originalNum / 10)];
        if (originalNum % 10 > 0) words += " y " + unidades[originalNum % 10];
      } else if (originalNum >= 10) {
        words += especiales[originalNum - 10];
      } else if (originalNum > 0) {
        words += unidades[originalNum];
      }

      return words + " pesos";
    }

    // Validate form before submission
    function validateForm() {
      const checkIn = checkInInput.value;
      const checkOut = checkOutInput.value;

      if (!checkIn || !checkOut) {
        showNotification('Por favor seleccione las fechas de entrada y salida', 'warning');
        return false;
      }

      if (new Date(checkOut) <= new Date(checkIn)) {
        showNotification('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
        return false;
      }

      if (!priceField.value || priceField.value === '0.00') {
        showNotification('El precio no ha sido calculado correctamente', 'error');
        return false;
      }

      return true;
    }

    // Event listeners
    checkInInput.addEventListener("change", async (e) => {
      const checkIn = e.target.value;
      const checkOut = checkOutInput.value;

      // Update checkout minimum date
      checkOutInput.min = checkIn;

      if (checkOut && new Date(checkOut) <= new Date(checkIn)) {
        checkOutInput.value = "";
        showNotification('Fecha de salida actualizada', 'info');
      }

      if (checkIn && checkOut) {
        const nights = updateDurationDisplay(checkIn, checkOut);
        const isAvailable = await checkAvailability(checkIn, checkOut);
        if (isAvailable) {
          await fetchPrice(checkIn, nights);
        }
      } else if (checkIn) {
        await fetchPrice(checkIn, 1);
      }
    });

    checkOutInput.addEventListener("change", async (e) => {
      const checkIn = checkInInput.value;
      const checkOut = e.target.value;

      if (checkIn && checkOut) {
        if (new Date(checkOut) <= new Date(checkIn)) {
          showNotification('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
          e.target.value = "";
          return;
        }

        const nights = updateDurationDisplay(checkIn, checkOut);
        const isAvailable = await checkAvailability(checkIn, checkOut);
        if (isAvailable) {
          await fetchPrice(checkIn, nights);
        }
      }
    });

    // Form submission validation
    document.getElementById('formRent').addEventListener('submit', (e) => {
      if (!validateForm()) {
        e.preventDefault();
      } else {
        submitButton.disabled = true;
        submitButton.textContent = 'Creando renta...';
      }
    });

    // Phone number formatting
    document.getElementById('phone').addEventListener('input', (e) => {
      let value = e.target.value.replace(/\D/g, '');
      if (value.length > 10) value = value.slice(0, 10);
      e.target.value = value;
    });

    console.log('Sistema de renta inicializado correctamente');
  });
</script>
